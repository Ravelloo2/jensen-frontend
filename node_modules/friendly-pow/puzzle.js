import { getTimestampInSeconds } from "./timestamp";
import { expiryToDurationInSeconds } from "./encoding";
import { CHALLENGE_SIZE_BYTES } from "./constants";
export const PUZZLE_TIMESTAMP_OFFSET = 0;
export const ACCOUNT_ID_OFFSET = 4;
export const APP_ID_OFFSET = 8;
export const PUZZLE_VERSION_OFFSET = 12;
export const PUZZLE_EXPIRY_OFFSET = 13;
export const NUMBER_OF_PUZZLES_OFFSET = 14;
export const PUZZLE_DIFFICULTY_OFFSET = 15;
export const PUZZLE_NONCE_OFFSET = 24;
export const PUZZLE_USER_DATA_OFFSET = 32;
export const PUZZLE_USER_DATA_MAX_LENGTH = 32;
const VERSION = 1;
/**
 * Generates a puzzle for FriendlyCaptcha.
 */
export function generatePuzzleBuffer(opts) {
    var _a;
    const numBytes = opts.userDataBuffer ? 32 + opts.userDataBuffer.length : 32;
    const puzzle = new Uint8Array(numBytes);
    const v = new DataView(puzzle.buffer);
    const timeUint32 = opts.nowInSeconds === undefined ? getTimestampInSeconds() : opts.nowInSeconds;
    v.setUint32(PUZZLE_TIMESTAMP_OFFSET, timeUint32);
    v.setUint32(ACCOUNT_ID_OFFSET, opts.accountId);
    v.setUint32(APP_ID_OFFSET, opts.appId);
    v.setUint8(PUZZLE_VERSION_OFFSET, VERSION);
    v.setUint8(PUZZLE_EXPIRY_OFFSET, opts.puzzleExpiry);
    v.setUint8(NUMBER_OF_PUZZLES_OFFSET, opts.numberOfPuzzles);
    v.setUint8(PUZZLE_DIFFICULTY_OFFSET, opts.puzzleDifficulty);
    puzzle.set(opts.eightByteNonce, PUZZLE_NONCE_OFFSET);
    if ((_a = opts.userDataBuffer) === null || _a === void 0 ? void 0 : _a.slice(0, PUZZLE_USER_DATA_MAX_LENGTH)) {
        puzzle.set(opts.userDataBuffer, PUZZLE_USER_DATA_OFFSET);
    }
    return puzzle;
}
export function getPuzzleSolverInputs(puzzleBuffer, numPuzzles) {
    const startingPoints = [];
    for (let i = 0; i < numPuzzles; i++) {
        const input = new Uint8Array(CHALLENGE_SIZE_BYTES);
        input.set(puzzleBuffer);
        input[120] = i;
        startingPoints.push(input);
    }
    return startingPoints;
}
/**
 * Combine multiple solutions (8 byte values) into a single array
 * @param solutions
 */
export function combineSolutions(solutions) {
    const combined = new Uint8Array(solutions.length * 8);
    for (let i = 0; i < solutions.length; i++) {
        combined.set(solutions[i], i * 8);
    }
    return combined;
}
/**
 * Time in seconds the puzzle is valid for.
 * @param puzzleBuffer
 */
export function getPuzzleTTL(puzzleBuffer) {
    return expiryToDurationInSeconds(puzzleBuffer[PUZZLE_EXPIRY_OFFSET]);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHV6emxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3B1enpsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDcEQsT0FBTyxFQUFDLHlCQUF5QixFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQ3RELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUVuRCxNQUFNLENBQUMsTUFBTSx1QkFBdUIsR0FBRyxDQUFDLENBQUM7QUFDekMsTUFBTSxDQUFDLE1BQU0saUJBQWlCLEdBQUcsQ0FBQyxDQUFDO0FBQ25DLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxDQUFDLENBQUM7QUFDL0IsTUFBTSxDQUFDLE1BQU0scUJBQXFCLEdBQUcsRUFBRSxDQUFDO0FBQ3hDLE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFHLEVBQUUsQ0FBQztBQUN2QyxNQUFNLENBQUMsTUFBTSx3QkFBd0IsR0FBRyxFQUFFLENBQUM7QUFDM0MsTUFBTSxDQUFDLE1BQU0sd0JBQXdCLEdBQUcsRUFBRSxDQUFDO0FBQzNDLE1BQU0sQ0FBQyxNQUFNLG1CQUFtQixHQUFHLEVBQUUsQ0FBQztBQUN0QyxNQUFNLENBQUMsTUFBTSx1QkFBdUIsR0FBRyxFQUFFLENBQUM7QUFFMUMsTUFBTSxDQUFDLE1BQU0sMkJBQTJCLEdBQUcsRUFBRSxDQUFDO0FBRTlDLE1BQU0sT0FBTyxHQUFHLENBQUMsQ0FBQztBQUVsQjs7R0FFRztBQUNILE1BQU0sVUFBVSxvQkFBb0IsQ0FBQyxJQUE0Szs7SUFDN00sTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7SUFFNUUsTUFBTSxNQUFNLEdBQUcsSUFBSSxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDeEMsTUFBTSxDQUFDLEdBQUcsSUFBSSxRQUFRLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRXRDLE1BQU0sVUFBVSxHQUFRLElBQUksQ0FBQyxZQUFZLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxxQkFBcUIsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDO0lBRXRHLENBQUMsQ0FBQyxTQUFTLENBQUMsdUJBQXVCLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFDakQsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxpQkFBaUIsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDL0MsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3ZDLENBQUMsQ0FBQyxRQUFRLENBQUMscUJBQXFCLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDM0MsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxvQkFBb0IsRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDcEQsQ0FBQyxDQUFDLFFBQVEsQ0FBQyx3QkFBd0IsRUFBRSxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7SUFDM0QsQ0FBQyxDQUFDLFFBQVEsQ0FBQyx3QkFBd0IsRUFBRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztJQUU1RCxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsbUJBQW1CLENBQUMsQ0FBQztJQUNyRCxVQUFJLElBQUksQ0FBQyxjQUFjLDBDQUFFLEtBQUssQ0FBQyxDQUFDLEVBQUUsMkJBQTJCLEdBQUc7UUFDNUQsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLHVCQUF1QixDQUFDLENBQUM7S0FDNUQ7SUFFRCxPQUFPLE1BQU0sQ0FBQztBQUNsQixDQUFDO0FBRUQsTUFBTSxVQUFVLHFCQUFxQixDQUFDLFlBQXdCLEVBQUUsVUFBa0I7SUFDOUUsTUFBTSxjQUFjLEdBQWlCLEVBQUUsQ0FBQztJQUV4QyxLQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsVUFBVSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ2hDLE1BQU0sS0FBSyxHQUFHLElBQUksVUFBVSxDQUFDLG9CQUFvQixDQUFDLENBQUM7UUFDbkQsS0FBSyxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUN4QixLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2YsY0FBYyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztLQUM5QjtJQUNELE9BQU8sY0FBYyxDQUFDO0FBQzFCLENBQUM7QUFFRDs7O0dBR0c7QUFDSCxNQUFNLFVBQVUsZ0JBQWdCLENBQUMsU0FBdUI7SUFDcEQsTUFBTSxRQUFRLEdBQUcsSUFBSSxVQUFVLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztJQUN0RCxLQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsU0FBUyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUN0QyxRQUFRLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUM7S0FDbkM7SUFDRCxPQUFPLFFBQVEsQ0FBQztBQUNwQixDQUFDO0FBRUQ7OztHQUdHO0FBQ0gsTUFBTSxVQUFVLFlBQVksQ0FBQyxZQUF3QjtJQUNqRCxPQUFPLHlCQUF5QixDQUFDLFlBQVksQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLENBQUM7QUFDekUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldFRpbWVzdGFtcEluU2Vjb25kcyB9IGZyb20gXCIuL3RpbWVzdGFtcFwiO1xyXG5pbXBvcnQge2V4cGlyeVRvRHVyYXRpb25JblNlY29uZHMgfSBmcm9tIFwiLi9lbmNvZGluZ1wiO1xyXG5pbXBvcnQgeyBDSEFMTEVOR0VfU0laRV9CWVRFUyB9IGZyb20gXCIuL2NvbnN0YW50c1wiO1xyXG5cclxuZXhwb3J0IGNvbnN0IFBVWlpMRV9USU1FU1RBTVBfT0ZGU0VUID0gMDtcclxuZXhwb3J0IGNvbnN0IEFDQ09VTlRfSURfT0ZGU0VUID0gNDtcclxuZXhwb3J0IGNvbnN0IEFQUF9JRF9PRkZTRVQgPSA4O1xyXG5leHBvcnQgY29uc3QgUFVaWkxFX1ZFUlNJT05fT0ZGU0VUID0gMTI7XHJcbmV4cG9ydCBjb25zdCBQVVpaTEVfRVhQSVJZX09GRlNFVCA9IDEzO1xyXG5leHBvcnQgY29uc3QgTlVNQkVSX09GX1BVWlpMRVNfT0ZGU0VUID0gMTQ7XHJcbmV4cG9ydCBjb25zdCBQVVpaTEVfRElGRklDVUxUWV9PRkZTRVQgPSAxNTtcclxuZXhwb3J0IGNvbnN0IFBVWlpMRV9OT05DRV9PRkZTRVQgPSAyNDtcclxuZXhwb3J0IGNvbnN0IFBVWlpMRV9VU0VSX0RBVEFfT0ZGU0VUID0gMzI7XHJcblxyXG5leHBvcnQgY29uc3QgUFVaWkxFX1VTRVJfREFUQV9NQVhfTEVOR1RIID0gMzI7XHJcblxyXG5jb25zdCBWRVJTSU9OID0gMTtcclxuXHJcbi8qKlxyXG4gKiBHZW5lcmF0ZXMgYSBwdXp6bGUgZm9yIEZyaWVuZGx5Q2FwdGNoYS5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZVB1enpsZUJ1ZmZlcihvcHRzOiB7bm93SW5TZWNvbmRzPzogdTMyOyBhY2NvdW50SWQ6IHUzMjsgYXBwSWQ6IHUzMjsgbnVtYmVyT2ZQdXp6bGVzOiB1ODsgcHV6emxlRXhwaXJ5OiB1ODsgcHV6emxlRGlmZmljdWx0eTogdTg7IGVpZ2h0Qnl0ZU5vbmNlOiBVaW50OEFycmF5OyB1c2VyRGF0YUJ1ZmZlcj86IFVpbnQ4QXJyYXl9KTogVWludDhBcnJheSB7XHJcbiAgICBjb25zdCBudW1CeXRlcyA9IG9wdHMudXNlckRhdGFCdWZmZXIgPyAzMiArIG9wdHMudXNlckRhdGFCdWZmZXIubGVuZ3RoIDogMzI7XHJcbiAgICBcclxuICAgIGNvbnN0IHB1enpsZSA9IG5ldyBVaW50OEFycmF5KG51bUJ5dGVzKTtcclxuICAgIGNvbnN0IHYgPSBuZXcgRGF0YVZpZXcocHV6emxlLmJ1ZmZlcik7XHJcblxyXG4gICAgY29uc3QgdGltZVVpbnQzMjogdTMyID0gb3B0cy5ub3dJblNlY29uZHMgPT09IHVuZGVmaW5lZCA/IGdldFRpbWVzdGFtcEluU2Vjb25kcygpIDogb3B0cy5ub3dJblNlY29uZHM7XHJcblxyXG4gICAgdi5zZXRVaW50MzIoUFVaWkxFX1RJTUVTVEFNUF9PRkZTRVQsIHRpbWVVaW50MzIpO1xyXG4gICAgdi5zZXRVaW50MzIoQUNDT1VOVF9JRF9PRkZTRVQsIG9wdHMuYWNjb3VudElkKTtcclxuICAgIHYuc2V0VWludDMyKEFQUF9JRF9PRkZTRVQsIG9wdHMuYXBwSWQpO1xyXG4gICAgdi5zZXRVaW50OChQVVpaTEVfVkVSU0lPTl9PRkZTRVQsIFZFUlNJT04pO1xyXG4gICAgdi5zZXRVaW50OChQVVpaTEVfRVhQSVJZX09GRlNFVCwgb3B0cy5wdXp6bGVFeHBpcnkpO1xyXG4gICAgdi5zZXRVaW50OChOVU1CRVJfT0ZfUFVaWkxFU19PRkZTRVQsIG9wdHMubnVtYmVyT2ZQdXp6bGVzKTtcclxuICAgIHYuc2V0VWludDgoUFVaWkxFX0RJRkZJQ1VMVFlfT0ZGU0VULCBvcHRzLnB1enpsZURpZmZpY3VsdHkpO1xyXG5cclxuICAgIHB1enpsZS5zZXQob3B0cy5laWdodEJ5dGVOb25jZSwgUFVaWkxFX05PTkNFX09GRlNFVCk7XHJcbiAgICBpZiAob3B0cy51c2VyRGF0YUJ1ZmZlcj8uc2xpY2UoMCwgUFVaWkxFX1VTRVJfREFUQV9NQVhfTEVOR1RIKSkge1xyXG4gICAgICAgIHB1enpsZS5zZXQob3B0cy51c2VyRGF0YUJ1ZmZlciwgUFVaWkxFX1VTRVJfREFUQV9PRkZTRVQpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBwdXp6bGU7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRQdXp6bGVTb2x2ZXJJbnB1dHMocHV6emxlQnVmZmVyOiBVaW50OEFycmF5LCBudW1QdXp6bGVzOiBudW1iZXIpOiBVaW50OEFycmF5W10ge1xyXG4gICAgY29uc3Qgc3RhcnRpbmdQb2ludHM6IFVpbnQ4QXJyYXlbXSA9IFtdO1xyXG5cclxuICAgIGZvcihsZXQgaSA9IDA7IGkgPCBudW1QdXp6bGVzOyBpKyspIHtcclxuICAgICAgICBjb25zdCBpbnB1dCA9IG5ldyBVaW50OEFycmF5KENIQUxMRU5HRV9TSVpFX0JZVEVTKTtcclxuICAgICAgICBpbnB1dC5zZXQocHV6emxlQnVmZmVyKTtcclxuICAgICAgICBpbnB1dFsxMjBdID0gaTtcclxuICAgICAgICBzdGFydGluZ1BvaW50cy5wdXNoKGlucHV0KTtcclxuICAgIH1cclxuICAgIHJldHVybiBzdGFydGluZ1BvaW50cztcclxufVxyXG5cclxuLyoqXHJcbiAqIENvbWJpbmUgbXVsdGlwbGUgc29sdXRpb25zICg4IGJ5dGUgdmFsdWVzKSBpbnRvIGEgc2luZ2xlIGFycmF5XHJcbiAqIEBwYXJhbSBzb2x1dGlvbnMgXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gY29tYmluZVNvbHV0aW9ucyhzb2x1dGlvbnM6IFVpbnQ4QXJyYXlbXSk6IFVpbnQ4QXJyYXkge1xyXG4gICAgY29uc3QgY29tYmluZWQgPSBuZXcgVWludDhBcnJheShzb2x1dGlvbnMubGVuZ3RoICogOCk7XHJcbiAgICBmb3IobGV0IGkgPSAwOyBpIDwgc29sdXRpb25zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgY29tYmluZWQuc2V0KHNvbHV0aW9uc1tpXSwgaSo4KTtcclxuICAgIH1cclxuICAgIHJldHVybiBjb21iaW5lZDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFRpbWUgaW4gc2Vjb25kcyB0aGUgcHV6emxlIGlzIHZhbGlkIGZvci5cclxuICogQHBhcmFtIHB1enpsZUJ1ZmZlciBcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRQdXp6bGVUVEwocHV6emxlQnVmZmVyOiBVaW50OEFycmF5KSB7XHJcbiAgICByZXR1cm4gZXhwaXJ5VG9EdXJhdGlvbkluU2Vjb25kcyhwdXp6bGVCdWZmZXJbUFVaWkxFX0VYUElSWV9PRkZTRVRdKTtcclxufVxyXG4iXX0=