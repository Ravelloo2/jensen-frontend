import { difficultyToThreshold, expiryToDurationInSeconds } from "./encoding";
import { PUZZLE_DIFFICULTY_OFFSET, NUMBER_OF_PUZZLES_OFFSET, PUZZLE_TIMESTAMP_OFFSET, PUZZLE_EXPIRY_OFFSET, ACCOUNT_ID_OFFSET, APP_ID_OFFSET, PUZZLE_VERSION_OFFSET } from "./puzzle";
import { Context, blake2bResetForShortMessage, blake2bCompress } from "./blake2b/blake2b";
import { HASH_SIZE_BYTES } from "./solver";
import { CHALLENGE_SIZE_BYTES } from "./constants";
import { getTimestampInSeconds } from "./timestamp";
export function checkSolutions(puzzleBuffer, solutionsBuffer) {
    const threshold = difficultyToThreshold(puzzleBuffer[PUZZLE_DIFFICULTY_OFFSET]);
    const ctx = new Context(HASH_SIZE_BYTES);
    ctx.t = CHALLENGE_SIZE_BYTES;
    const input = new Uint8Array(CHALLENGE_SIZE_BYTES);
    input.set(puzzleBuffer, 0);
    const solutions = new Set();
    for (let i = 0; i < solutionsBuffer.length / 8; i++) {
        const solution = solutionsBuffer.slice(i * 8, i * 8 + 8);
        const solutionString = solution.toString();
        // Duplicate check
        if (solutions.has(solutionString)) {
            return false;
        }
        solutions.add(solutionString);
        input.set(solution, 120);
        blake2bResetForShortMessage(ctx, input);
        blake2bCompress(ctx, true);
        if (ctx.h[0] >= threshold) {
            return false;
        }
    }
    return true;
}
export function checkAmountOfSolutions(puzzleBuffer, solutionBuffer) {
    const amountOfSolutionsRequired = puzzleBuffer[NUMBER_OF_PUZZLES_OFFSET];
    return solutionBuffer.length == amountOfSolutionsRequired * 8;
}
export function checkPuzzleExpiry(puzzleBuffer) {
    const timeNow = getTimestampInSeconds();
    const view = new DataView(puzzleBuffer.buffer);
    const puzzleTimestamp = view.getUint32(PUZZLE_TIMESTAMP_OFFSET);
    const puzzleExpiryByte = view.getUint8(PUZZLE_EXPIRY_OFFSET);
    const expirationTime = puzzleTimestamp + expiryToDurationInSeconds(puzzleExpiryByte);
    return expirationTime >= timeNow;
}
export function checkAccountAndAppId(puzzleBuffer, accountId, appId) {
    const view = new DataView(puzzleBuffer.buffer);
    return accountId == view.getUint32(ACCOUNT_ID_OFFSET) && appId == view.getUint32(APP_ID_OFFSET);
}
export function checkVersionExactly(puzzleBuffer, version) {
    return puzzleBuffer[PUZZLE_VERSION_OFFSET] === version;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVyaWZpY2F0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3ZlcmlmaWNhdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUscUJBQXFCLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDOUUsT0FBTyxFQUFFLHdCQUF3QixFQUFFLHdCQUF3QixFQUFFLHVCQUF1QixFQUFFLG9CQUFvQixFQUFFLGlCQUFpQixFQUFFLGFBQWEsRUFBRSxxQkFBcUIsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUN0TCxPQUFPLEVBQUUsT0FBTyxFQUFFLDJCQUEyQixFQUFFLGVBQWUsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQzFGLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDM0MsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ25ELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUVwRCxNQUFNLFVBQVUsY0FBYyxDQUFDLFlBQXdCLEVBQUUsZUFBMkI7SUFDaEYsTUFBTSxTQUFTLEdBQUcscUJBQXFCLENBQUMsWUFBWSxDQUFDLHdCQUF3QixDQUFDLENBQUMsQ0FBQztJQUVoRixNQUFNLEdBQUcsR0FBRyxJQUFJLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUN6QyxHQUFHLENBQUMsQ0FBQyxHQUFHLG9CQUFvQixDQUFDO0lBRTdCLE1BQU0sS0FBSyxHQUFHLElBQUksVUFBVSxDQUFDLG9CQUFvQixDQUFDLENBQUM7SUFDbkQsS0FBSyxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFFM0IsTUFBTSxTQUFTLEdBQUcsSUFBSSxHQUFHLEVBQVUsQ0FBQztJQUVwQyxLQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsZUFBZSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDaEQsTUFBTSxRQUFRLEdBQUcsZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUMsQ0FBQyxFQUFFLENBQUMsR0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbkQsTUFBTSxjQUFjLEdBQUcsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQzNDLGtCQUFrQjtRQUNsQixJQUFJLFNBQVMsQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLEVBQUU7WUFDL0IsT0FBTyxLQUFLLENBQUM7U0FDaEI7UUFDRCxTQUFTLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBRTlCLEtBQUssQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ3pCLDJCQUEyQixDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUN4QyxlQUFlLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBRTNCLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxTQUFTLEVBQUU7WUFDdkIsT0FBTyxLQUFLLENBQUM7U0FDaEI7S0FDSjtJQUVELE9BQU8sSUFBSSxDQUFDO0FBQ2hCLENBQUM7QUFFRCxNQUFNLFVBQVUsc0JBQXNCLENBQUMsWUFBd0IsRUFBRSxjQUEwQjtJQUN2RixNQUFNLHlCQUF5QixHQUFRLFlBQVksQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO0lBQzlFLE9BQU8sY0FBYyxDQUFDLE1BQU0sSUFBSSx5QkFBeUIsR0FBQyxDQUFDLENBQUM7QUFDaEUsQ0FBQztBQUVELE1BQU0sVUFBVSxpQkFBaUIsQ0FBQyxZQUF3QjtJQUN0RCxNQUFNLE9BQU8sR0FBRyxxQkFBcUIsRUFBRSxDQUFDO0lBQ3hDLE1BQU0sSUFBSSxHQUFHLElBQUksUUFBUSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUMvQyxNQUFNLGVBQWUsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLHVCQUF1QixDQUFDLENBQUM7SUFDaEUsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLG9CQUFvQixDQUFDLENBQUM7SUFFN0QsTUFBTSxjQUFjLEdBQUcsZUFBZSxHQUFHLHlCQUF5QixDQUFDLGdCQUFnQixDQUFDLENBQUM7SUFDckYsT0FBTyxjQUFjLElBQUksT0FBTyxDQUFDO0FBQ3JDLENBQUM7QUFFRCxNQUFNLFVBQVUsb0JBQW9CLENBQUMsWUFBd0IsRUFBRSxTQUFpQixFQUFFLEtBQWE7SUFDM0YsTUFBTSxJQUFJLEdBQUcsSUFBSSxRQUFRLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQy9DLE9BQU8sU0FBUyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsaUJBQWlCLENBQUMsSUFBSSxLQUFLLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUNwRyxDQUFDO0FBRUQsTUFBTSxVQUFVLG1CQUFtQixDQUFDLFlBQXdCLEVBQUUsT0FBZTtJQUN6RSxPQUFPLFlBQVksQ0FBQyxxQkFBcUIsQ0FBQyxLQUFLLE9BQU8sQ0FBQztBQUMzRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZGlmZmljdWx0eVRvVGhyZXNob2xkLCBleHBpcnlUb0R1cmF0aW9uSW5TZWNvbmRzIH0gZnJvbSBcIi4vZW5jb2RpbmdcIjtcclxuaW1wb3J0IHsgUFVaWkxFX0RJRkZJQ1VMVFlfT0ZGU0VULCBOVU1CRVJfT0ZfUFVaWkxFU19PRkZTRVQsIFBVWlpMRV9USU1FU1RBTVBfT0ZGU0VULCBQVVpaTEVfRVhQSVJZX09GRlNFVCwgQUNDT1VOVF9JRF9PRkZTRVQsIEFQUF9JRF9PRkZTRVQsIFBVWlpMRV9WRVJTSU9OX09GRlNFVCB9IGZyb20gXCIuL3B1enpsZVwiO1xyXG5pbXBvcnQgeyBDb250ZXh0LCBibGFrZTJiUmVzZXRGb3JTaG9ydE1lc3NhZ2UsIGJsYWtlMmJDb21wcmVzcyB9IGZyb20gXCIuL2JsYWtlMmIvYmxha2UyYlwiO1xyXG5pbXBvcnQgeyBIQVNIX1NJWkVfQllURVMgfSBmcm9tIFwiLi9zb2x2ZXJcIjtcclxuaW1wb3J0IHsgQ0hBTExFTkdFX1NJWkVfQllURVMgfSBmcm9tIFwiLi9jb25zdGFudHNcIjtcclxuaW1wb3J0IHsgZ2V0VGltZXN0YW1wSW5TZWNvbmRzIH0gZnJvbSBcIi4vdGltZXN0YW1wXCI7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY2hlY2tTb2x1dGlvbnMocHV6emxlQnVmZmVyOiBVaW50OEFycmF5LCBzb2x1dGlvbnNCdWZmZXI6IFVpbnQ4QXJyYXkpOiBib29sIHtcclxuICAgIGNvbnN0IHRocmVzaG9sZCA9IGRpZmZpY3VsdHlUb1RocmVzaG9sZChwdXp6bGVCdWZmZXJbUFVaWkxFX0RJRkZJQ1VMVFlfT0ZGU0VUXSk7XHJcblxyXG4gICAgY29uc3QgY3R4ID0gbmV3IENvbnRleHQoSEFTSF9TSVpFX0JZVEVTKTtcclxuICAgIGN0eC50ID0gQ0hBTExFTkdFX1NJWkVfQllURVM7XHJcblxyXG4gICAgY29uc3QgaW5wdXQgPSBuZXcgVWludDhBcnJheShDSEFMTEVOR0VfU0laRV9CWVRFUyk7XHJcbiAgICBpbnB1dC5zZXQocHV6emxlQnVmZmVyLCAwKTtcclxuXHJcbiAgICBjb25zdCBzb2x1dGlvbnMgPSBuZXcgU2V0PHN0cmluZz4oKTtcclxuXHJcbiAgICBmb3IobGV0IGkgPSAwOyBpIDwgc29sdXRpb25zQnVmZmVyLmxlbmd0aCAvIDg7IGkrKykge1xyXG4gICAgICAgIGNvbnN0IHNvbHV0aW9uID0gc29sdXRpb25zQnVmZmVyLnNsaWNlKGkqOCwgaSo4KzgpO1xyXG4gICAgICAgIGNvbnN0IHNvbHV0aW9uU3RyaW5nID0gc29sdXRpb24udG9TdHJpbmcoKTtcclxuICAgICAgICAvLyBEdXBsaWNhdGUgY2hlY2tcclxuICAgICAgICBpZiAoc29sdXRpb25zLmhhcyhzb2x1dGlvblN0cmluZykpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzb2x1dGlvbnMuYWRkKHNvbHV0aW9uU3RyaW5nKTtcclxuXHJcbiAgICAgICAgaW5wdXQuc2V0KHNvbHV0aW9uLCAxMjApO1xyXG4gICAgICAgIGJsYWtlMmJSZXNldEZvclNob3J0TWVzc2FnZShjdHgsIGlucHV0KTtcclxuICAgICAgICBibGFrZTJiQ29tcHJlc3MoY3R4LCB0cnVlKTtcclxuXHJcbiAgICAgICAgaWYgKGN0eC5oWzBdID49IHRocmVzaG9sZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0cnVlO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY2hlY2tBbW91bnRPZlNvbHV0aW9ucyhwdXp6bGVCdWZmZXI6IFVpbnQ4QXJyYXksIHNvbHV0aW9uQnVmZmVyOiBVaW50OEFycmF5KTogYm9vbGVhbiB7XHJcbiAgICBjb25zdCBhbW91bnRPZlNvbHV0aW9uc1JlcXVpcmVkOiB1MzIgPSBwdXp6bGVCdWZmZXJbTlVNQkVSX09GX1BVWlpMRVNfT0ZGU0VUXTtcclxuICAgIHJldHVybiBzb2x1dGlvbkJ1ZmZlci5sZW5ndGggPT0gYW1vdW50T2ZTb2x1dGlvbnNSZXF1aXJlZCo4O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY2hlY2tQdXp6bGVFeHBpcnkocHV6emxlQnVmZmVyOiBVaW50OEFycmF5KTogYm9vbGVhbiB7XHJcbiAgICBjb25zdCB0aW1lTm93ID0gZ2V0VGltZXN0YW1wSW5TZWNvbmRzKCk7XHJcbiAgICBjb25zdCB2aWV3ID0gbmV3IERhdGFWaWV3KHB1enpsZUJ1ZmZlci5idWZmZXIpO1xyXG4gICAgY29uc3QgcHV6emxlVGltZXN0YW1wID0gdmlldy5nZXRVaW50MzIoUFVaWkxFX1RJTUVTVEFNUF9PRkZTRVQpO1xyXG4gICAgY29uc3QgcHV6emxlRXhwaXJ5Qnl0ZSA9IHZpZXcuZ2V0VWludDgoUFVaWkxFX0VYUElSWV9PRkZTRVQpO1xyXG4gICAgXHJcbiAgICBjb25zdCBleHBpcmF0aW9uVGltZSA9IHB1enpsZVRpbWVzdGFtcCArIGV4cGlyeVRvRHVyYXRpb25JblNlY29uZHMocHV6emxlRXhwaXJ5Qnl0ZSk7XHJcbiAgICByZXR1cm4gZXhwaXJhdGlvblRpbWUgPj0gdGltZU5vdztcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrQWNjb3VudEFuZEFwcElkKHB1enpsZUJ1ZmZlcjogVWludDhBcnJheSwgYWNjb3VudElkOiBudW1iZXIsIGFwcElkOiBudW1iZXIpIHtcclxuICAgIGNvbnN0IHZpZXcgPSBuZXcgRGF0YVZpZXcocHV6emxlQnVmZmVyLmJ1ZmZlcik7XHJcbiAgICByZXR1cm4gYWNjb3VudElkID09IHZpZXcuZ2V0VWludDMyKEFDQ09VTlRfSURfT0ZGU0VUKSAmJiBhcHBJZCA9PSB2aWV3LmdldFVpbnQzMihBUFBfSURfT0ZGU0VUKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrVmVyc2lvbkV4YWN0bHkocHV6emxlQnVmZmVyOiBVaW50OEFycmF5LCB2ZXJzaW9uOiBudW1iZXIpIHtcclxuICAgIHJldHVybiBwdXp6bGVCdWZmZXJbUFVaWkxFX1ZFUlNJT05fT0ZGU0VUXSA9PT0gdmVyc2lvbjtcclxufVxyXG4iXX0=